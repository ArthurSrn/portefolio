---
import { storyblokEditable } from "@storyblok/astro";
import type { SbBlokData } from "@storyblok/js";
import type {
  Navbar,
  NavigationItems,
} from "../../.storyblok/types/285539525668951/storyblok-components";
import { Image } from "astro:assets";
import { Sun } from "lucide-react";

interface Props {
  blok: Navbar;
}

const { blok }: Props = Astro.props;
---

<!-- <style>
  * {
    border: 1px solid red;
  }
</style> -->

<style>
/* caché au chargement - ne prend pas d'espace */
.hidden-element{
  width: 0;
  opacity: 0;
  overflow: hidden;
  white-space: nowrap; /* empêche le contenu de se casser */
}
</style>

<script>
  // @ts-nocheck
  import gsap from 'gsap';
  import { GSDevTools } from "gsap/GSDevTools";
  GSDevTools.create();

  const navbar = document.querySelector('nav');
  const navContainer = navbar?.getElementsByClassName('contain');

  const tl = gsap.timeline();

  tl.from(navbar, {
    y: -200,
    opacity: 0,
    delay: 0.5,
    ease: "power2.out"
  })

  // Animation d'étirement - l'élément grandit de 0 à sa taille naturelle
  tl.to(".container-element", {
  
    padding: "0.3rem",
    duration: 0.2,
    ease: "",
  });
  
  tl.to(".hidden-element", {
    display: "flex",
    width: "auto", /* largeur automatique basée sur le contenu */
    opacity: 1,
    duration: 0.3,
    ease: "",
    stagger: 0.1 /* si plusieurs éléments */
  });

</script>

<nav {...storyblokEditable(blok as SbBlokData)} class="flex justify-center gap-4 sticky">
  <div class="container-element flex items-center backdrop-blur-md bg-white/10 border border-white/30 rounded-full mt-2 shadow-lg">
   
    <a href="/"> 
      <Image
        src={blok.Logo?.filename || ""}
        alt={blok.Logo?.alt || "Site logo"}
        width={50}
        height={50}
        id="logo"
        class=" border-2 border-b-gray-300-500 rounded-full"
        loading="lazy"
      />
    </a>
    <div class="hidden-element flex items-center">
    <ul id="menu" class="flex gap-6 ml-4">
      {
        blok.navigation_items?.map((item) => {
          const navItem = item as NavigationItems;
          return <li class="test" {...storyblokEditable(navItem as SbBlokData)}><a  class="nav-link" href={navItem.url}>{navItem.label}</a></li>
        })
      }
    <div class="indicator"></div>
    </ul>

    {/* Submenu - Afficher seulement si il y a des items */}
    {blok.submenu_items && blok.submenu_items.length > 0 && (
      <select>
        {
          blok.submenu_items.map((item) => {
            return <option>{item}</option>;
          })
        }
      </select>
    )}

   <Sun size={34} strokeWidth={0.75} className="pr-2" />
  </div>
</div>
</nav>
